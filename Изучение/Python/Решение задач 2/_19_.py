#ДЕКОРАТОРЫ-ЭТО ОБЁРТКИ ДЛЯ ФУНКЦИЙ(ФУНКЦИЮ ДОБАВИТЬ В ФУНКЦИЮ)
#ДЕКОРАТОРЫ ЗАМЕДЛЯЮТ ПРОЦЕСС
#В DECORATOR ПИШУТ ФУНКЦИЮ С ДОБАВЛЕНИЕМ В СКОБКИ У DECORATOR ПЕРЕМЕННОЙ,КОТОРАЯ
#БУДЕТ В НОВОЙ ФУНКЦИИ ВЫВОДИТЬ ТО,ЧТО ПИШЕМ -> ДОБАВЛЕНИЕ НОВОЙ ФУНКЦИИ НУЖНО
#ДАЁТ (DEC=DECORATOR(SHOW))->ТОЕСТЬ ПОСЛЕ КАЖДОГО ДЕЙСТВИЯ ФУНКЦИИ DECORATOR ПРО-
#СХОДИТ ДЕЙСТВИЕ ФУНКЦИИ SHOW(В ФУНКЦИИ DECORATOR ОБЁРНУТА ФУНКЦИЯ SHOW)

def decorator(func):#В СКОБКАХ НУЖНО ПИСАТЬ ФУНКЦИЮ,КОТОРУЮ БУДЕМ ОБЁРТЫВАТЬ
    def wrapper():#СОЗДАЁМ ОБЁРТКУ В НОВОЙ ФУНКУЦИИ
        print("Код до выполнения функции")#ЭТО ДЛЯ WRAPPER
        func()#ТЕПЕРЬ ПИШЕМ КОД ДЛЯ FUNC:
        print("Код после выполнения функции")#ЭТО ДЛЯ FUNC
    return wrapper#ОНО ПОВТОРЯЕТ(ВЫВОДИТ) ВСЁ,ЧТО БЫЛО В WRAPPER

def test(func):#В СКОБКАХ НУЖНО ПИСАТЬ ФУНКЦИЮ,КОТОРУЮ БУДЕМ ОБЁРТЫВАТЬ
    def wrapper():#СОЗДАЁМ ОБЁРТКУ В НОВОЙ ФУНКУЦИИ
        print("Код до выполнения функции 2")#ЭТО ДЛЯ WRAPPER
        func()#ТЕПЕРЬ ПИШЕМ КОД ДЛЯ FUNC:
        print("Код после выполнения функции 2")#ЭТО ДЛЯ FUNC
    return wrapper#ОНО ПОВТОРЯЕТ(ВЫВОДИТ) ВСЁ,ЧТО БЫЛО В WRAPPER

@test #@ - (СОБАКА) ДЕЛАЕТ ДЕКОРАТОРОМ ФУНКЦИЮ,КОТОРАЯ ИДЁТ ДАЛЬШЕ НЕГО
def show():#САМАЯ ОБЫЧНАЯ ФУНКЦИЯ,КОТОРАЯ:
    print("Я обычная функция")#У ФУНКЦИИ SHOW("НУЖНО ВПИСАТЬ ЗНАЧЕНИЕ");ОНО ВЫВОДИТЬСЯ

dec=decorator(show)#СОЗДАЁМ ОБЬЕКТ,КОТОРОМУ ПРИСВАИВАЮТ ЗНАЧЕНИЯ DECORATE(SHOW),
dec()#SHOW-ФУНКЦИЯ,КОТОРУЮ МЫ ХОТИМ ОБЕРНУТЬ В ФУНКЦИЮ DECORATOR

