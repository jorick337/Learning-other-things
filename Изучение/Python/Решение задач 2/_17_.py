#НАСЛЕДОВАНИЕ:

#СОЗДАЁМ КЛАСС :

class Person:#КЛАСС НАЗЫВАЕТСЯ PERSON 
    name="jora"#ВВОДИМ ПЕРЕМЕННУЮ NAME
    age=15#ВВОДИМ ПЕРЕМЕННУЮ AGE

    def set(self,name,age):#ФУНКЦИЯ ДЛЯ БОЛЕЕ КОРОТКОГО НАПИСАНИЯ ЗНАЧЕНИЙ ОБЬЕКТУ
        self.name=name#ТУ;ТЕПЕРЬ ИМЯ МОЖНО ВПИСАТЬ В СКОБКИ
        self.age=age#КАК И ЛЕТ
        
#СОЗДАЁМ НОВЫЙ КЛАСС:
        
class Student(Person):#ЭТОТ КЛАС НАСЛЕДУЕТ ВСЕ ФУНКЦИИ И ЗНАЧЕНИЯ ФУНКЦИИ Person
    course=1#ТАКЖЕ ОН МОЖЕТ ИСПОЛЬЗОВАТЬ СВОИ ЗНАЧЕНИЯ И ФУНКЦИИ

#ПРИНЦИП НАСЛЕДОВАНИЯ:

kosty=Student()#ЗАПИСЫВАЕМ ОБЬЕКТ В STUDENT,КОТОРЫЙ БУДЕТ ТАКЖЕ ИСПОЛЬЗОВАТЬ PER- 
kosty.set("Костя",45)#SON;ИСПОЛЬЗОВАНИЕ ФУНКЦИИ ИЗ PERSON(НАСЛЕДОВАНИЕ ФУНКЦИИ)
kosty.course=4#ДАЁМ ЗНАЧЕНИЕ COURSE(МОЖЕМ ИСПОЛЬЗОВАТЬ ВСЁ ЧТО В STUDENT) 
print(kosty.name+" "+str(kosty.age)+" "+str(kosty.course))#ВЫВОДИМ ИМЯ+ПРОБЕЛ+ВОЗ
print()#ЗРАСТ+ПРОБЕЛ+КУРС

#ИНКАПСУЛЯЦИЯ-ЭТО ЗАПРЕТ ИСПОЛЬЗОВАНИЯ КАКИХ-ТО ФУНКЦИЙ:
#И ДОБАВЛЕНИЕ ЭТОГО КЛАССА В НАСЛЕДОВАНИЕ(ИНАЧЕ ОШИБКА)

class pip:#СОЗДАЁМ КЛАСС 
    _h=9# _ - ЭТО ЛИШЬ НАМЁК ДРУГОМУ ПРОГРАММИСТУ,ЧТО ЛУЧШЕ НЕ ИСПОЛЬЗОВАТЬ ДАН- 
    _e=6#НУЮ ФУНКЦИЮ,КЛАСС И Т.Д (ВСЁ БУДЕТ НОРМАЛЬНО НИЧЕГО НЕ ИЗМЕНИТЬСЯ)
    
class job:#СОЗДАЁМ КЛАСС 
    __worker=30# __ - ЭТО ОЗНАЧАЕТ,ЧТО БОЛЬШЕ НИКТО НЕ БУДЕТ ИСПОЛЬЗОВАТЬ ДАННЫЙ
    __jober=2#ОБЬЕКТ
    def __set(self,worker,jober):#ТЕПЕРЬ НИКТО БОЛЬШЕ НЕ ИЗМЕНИТ ЗНАЧЕНИЯ ЧЕРЕЗ
        self.worker=worker#ДАННУЮ ФУНКЦИЮ(ЭТО НУЖНО ДЛЯ ТОГО,ЧТОБЫ ДОДЕЛАТЬ ЧТО-
        self.jober=jober#ЛИБО ПОТОМ,УВИДЕВ ОШИБКУ)

#print(job.worker)#ЭТО БУДЕТ ОШИБКА,Т.К В ЭТОМ КЛАССЕ НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ ЭТО

#ПОЛИМОРФИЗ-ЭТО,КОГДА МЫ МОЖЕМ ИСПОЛЬЗОВАТЬ ОДИН И ТОТ ЖЕ МЕТОД,НО В РАЗНЫХ КЛАС
#САХ ОН ИСПОЛНЯЕТСЯ ПО РАЗНОМУ(ТИППАХ ДАННЫХ):

print(2+2)#ЭТО СЛОЖЕНИЕ ЧИСЕЛ,КОТОРЫЕ В ТИПЕ ДАННЫХ INTEGER ->4
print()

print('2'+'2')#ЭТО СЛОЖЕНИЕ СТРОК,КОТОРЫЕ В ТИПЕ ДАННЫХ STRING ->'22'
print()


        













    
