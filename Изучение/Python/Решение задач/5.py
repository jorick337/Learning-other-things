#Цикл while :

#1.
#Список квадратов
#По данному целому числу N распечатайте все квадраты натуральных чисел, не 
#превосходящие N, в порядке возрастания.

n=5
i=0
while i<n:
    i+=1
    m=i**2
    print(i,' ',m)
print()

#2.
#Минимальный делитель
#Дано целое число, не меньшее 2. Выведите его наименьший натуральный делитель, 
#отличный от 1.

n=45
i=1
while i<=n:
    i+=1
    if n%i==0:
        print(i)
        break
print()

#3.
#Степень двойки
#По данному натуральному числу N найдите наибольшую целую степень двойки, не 
#превосходящую N. Выведите показатель степени и саму степень.
#Операцией возведения в степень пользоваться нельзя!

n=1025
m=2
i=1
while m>i:
    m*=2
    i+=1
    if m<n and m*2>n :
        print(i,m)
        break
print()

#4.
#Утренняя пробежка
#В первый день спортсмен пробежал x километров, а затем он каждый день 
#увеличивал пробег на 10% от предыдущего значения. По данному числу y
#определите номер дня, на который пробег спортсмена составит не менее y километров.
#Программа получает на вход действительные числа x и y и должна вывести одно 
#натуральное число.

x=10
i=1
y=30
while x<y:
    x*=1.1
    i+=1
print(i)
print()

#5.
#Длина последовательности
#Программа получает на вход последовательность целых неотрицательных чисел, 
#каждое число записано в отдельной строке. Последовательность завершается 
#числом 0, при считывании которого программа должна закончить свою работу и 
#вывести количество членов последовательности (не считая завершающего числа 0).
#Числа, следующие за числом 0, считывать не нужно.

i=0
while int(input())!=0:
    i+=1
print(i)
print()

#6.
#Сумма последовательности
#Определите сумму всех элементов последовательности, завершающейся числом 0. 
#В этой и во всех следующих задачах числа, следующие за первым нулем, учитывать 
#не нужно.

a=0
b=1
while b!=0: 
    b=int(input())
    a+=b
print(a)
print()

#7.
#Среднее значение последовательности
#Определите среднее значение всех элементов последовательности,
#завершающейся числом 0.

a=0
i=0
b=1
while b!=0:
    i+=1
    b=int(input())
    a+=b
print(a/i)
print()

#8.
#Максимум последовательности
#Последовательность состоит из натуральных чисел и завершается числом 0. 
#Определите значение наибольшего элемента последовательности.

a=1
i=0
while a!=0:
    b=int(input())
    if b>a or b==a:
        i=b
    a=b
print(i)
print()

#9.
#Индекс максимума последовательности
#Последовательность состоит из натуральных чисел и завершается числом 0. 
#Определите индекс наибольшего элемента последовательности. Если наибольших 
#элементов несколько, выведите индекс первого из них. Нумерация элементов
#начинается с нуля.

c=0
a=1
i=-1
while a!=0:
    i+=1
    b=int(input())
    if b>a or b==a:
        c=i
    a=b
print(c)
print()

#10.
#Количество четных элементов последовательности
#Определите количество четных элементов в последовательности, завершающейся 
#числом 0.

a=1
i=-1
while a!=0:
    b=int(input())
    a=b
    if b%2==0:
        i+=1
print(i)
print()

#11.
#Количество элементов, которые больше предыдущего
#Последовательность состоит из натуральных чисел и завершается числом 0. 
#Определите, сколько элементов этой последовательности больше предыдущего
#элемента.

a=1
i=0
while a!=0:
    b=int(input())
    if b>a :
        i+=1
    a=b
print(i)
print()

#12.
#Второй максимум
#Последовательность состоит из различных натуральных чисел и завершается 
#числом 0. Определите значение второго по величине элемента в этой 
#последовательности. Гарантируется, что в последовательности есть хотя бы два
#элемента.

a=1
c=0
h=0
while a!=0:
    i+=1
    b=int(input())
    if b>c:
        h=c
    if b>a :
        c=b
    if i==2:
        if b<c:
            h=c
    a=b
print(h)
print()

#13.
#Количество элементов, равных максимуму
#Последовательность состоит из натуральных чисел и завершается числом 0. 
#Определите, сколько элементов этой последовательности равны ее наибольшему 
#элементу.

a=1
i=0
c=0
while a!=0:
    b=int(input())
    if c<b:
        i=1
    if b>a:
        c=b
    elif b==c:
        i+=1
    a=b
print(i)
print()

#14.
#Числа Фибоначчи
#Последовательность Фибоначчи определяется так:
#φ0 = 0,  φ1 = 1,  φn = φn−1 + φn−2
#По данному числу n определите n-е число Фибоначчи φn.
#Эту задачу можно решать и циклом for.

n=8
i=1
f=0
a=0
b=1
while i!=n:
    if i>=2:
        a=b
        b=f
    f=a+b
    i+=1
print(f)
print()

#15.
#Номер числа Фибоначчи
#Дано натуральное число A. Определите, каким по счету числом Фибоначчи оно 
#является, то есть выведите такое число n, что φn = A. Если А не является числом
#Фибоначчи, выведите число -1.

i=1134903170
f=0
n=1
a=0
b=1
while i!=f:
    if n>=100:
        n=-1
        break
    f=a+b
    a=b
    b=f
    n+=1
print(n)    
print()

#16.
#Максимальное число идущих подряд равных элементов
#Дана последовательность натуральных чисел, завершающаяся числом 0. 
#Определите, какое наибольшее число подряд идущих элементов этой 
#последовательности равны друг другу.

a=1
b=0
i=1
while a!=0:
    a=int(input())
    if a==0:
        if c>i:
            i=c
        break
    if a==b:
        i+=1
    if a!=b:
        c=i
        i=1
    b=a
print(i)
print()

#17.
#Стандартное отклонение
#Дана последовательность натуральных чисел x1, x2, ..., xn. Стандартным 
#отклонением называется величина m=sqr((x1=s)2+(x2-s)2+...+(xn-s)2/n-1)
#где s=x1+x2+…+xnn — среднее арифметическое последовательности.
#Определите стандартное отклонение для данной последовательности натуральных 
#чисел, завершающейся числом 0.

from math import sqrt
 
partial_sum = 0
partial_sum_squares = 0
x_i = int(input())
n = 0
while x_i != 0:
    n += 1
    partial_sum += x_i
    partial_sum_squares += x_i ** 2
    x_i = int(input())
print(sqrt((partial_sum_squares - partial_sum ** 2 / n) / (n - 1)))


    
    































































    



































































































        
        



























    
    
    
    
    
    
        


    

































































    

    
    
    
    
    
    
    
   
    
    
































    
