#Cписки

#1.
#Четные индексы
#Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4],...)

a=[2,3,63,2]
print(a[::2])
print()

#2.
#Четные элементы
#Выведите все четные элементы списка. При этом используйте цикл for, 
#перебирающий элементы списка, а не их индексы!

for i in a:
    if i%2==0:
        print(i,end=' ')
print('\n')

#3.
#Больше предыдущего
#Дан список чисел. Выведите все элементы списка, которые больше предыдущего 
#элемента.

a=[1,5,2,4,3]
b=0
for i in a:
    if i>b:
        b=i
        print(i)
print()

#4.
#Соседи одного знака
#Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите 
#эти числа. Если соседних элементов одного знака нет — не выводите ничего. Если 
#таких пар соседей несколько — выведите первую пару.

a=[-1,2,3,-1,-2]
b=0
for i in a:
    if i<0 and b<0 or i>0 and b>0:
        print(b,i)
        break
    b=i
print()

#5.
#Больше своих соседей
#Дан список чисел. Определите, сколько в этом списке элементов, которые больше 
#двух своих соседей, и выведите количество таких элементов. Крайние элементы 
#списка никогда не учитываются, поскольку у них недостаточно соседей.
    
a=[1,1,1,5,1]
b,c,o=0,0,0
for i in a:
    if o==len(a)-1:
        break
    if a[o]>a[o+1] and a[o]>a[o-1]:
        b+=1
    o+=1
print(b)
print()

#6.
#Наибольший элемент
#Дан список чисел. Выведите значение наибольшего элемента в списке, а затем 
#индекс этого элемента в списке. Если наибольших элементов несколько, выведите 
#индекс первого из них.

a=[3,1,2]
o=-1
b=0
for i in a:
    if i>b:
        o+=1
        b=i
print(b,o)
print()

#7.
#Шеренга
#Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить
#своё место в строю. Помогите ему это сделать.Программа получает на вход
#невозрастающую последовательность натуральных чисел, означающих рост каждого
#человека в строю. После этого вводится число X – рост Пети. Все числа во
#входных данных натуральные и не превышают 200.    
#Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди 
#с одинаковым ростом, таким же, как у Пети, то он должен встать после них.

a=[165,163,160,160,157,157,155,154]
b=[int(input())]
o=1
for i in b:
    for l in a:
        if l>=i:
            o+=1
print(o)
print()

#8.
#Количество различных элементов
#Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько 
#в нем различных элементов.

a=[1,2,3,4,5]
b,o=a[0],1
for i in a:
    if i!=b:
        o+=1
    b=i
print(o)
print()

#9.
#Переставить соседние
#Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т. д.). Если 
#элементов нечетное число, то последний элемент остается на своем месте.

a=[4,5,3,4,2,3]
o=0
for i in a:
    if o%2==0:
        if o==len(a)-1:
            break
        a[o],a[o+1]=a[o+1],a[o]
    o+=1
print(a)
print()

#10.
#Переставить min и max
#В списке все элементы различны. Поменяйте местами минимальный и 
#максимальный элемент этого списка.

a=[10,9,8,7,6,5,4,3,2,1,0]
index_of_min = 0
index_of_max = 0
for i in range(1, len(a)):
    print(i)
    if a[i] > a[index_of_max]:
        index_of_max = i
    if a[i] < a[index_of_min]:
        index_of_min = i
a[index_of_min], a[index_of_max] = a[index_of_max], a[index_of_min]
print(' '.join([str(i) for i in a]))
print()

#11.
#Удалить элемент
#Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с
#индексом k, сдвинув влево все элементы, стоящие правее элемента с индексом k.
#Программа получает на вход список, затем число k. Программа сдвигает все
#элементы, а после этого удаляет последний элемент списка при помощи метода
#pop() без параметров.
#Программа должна осуществлять сдвиг непосредственно в списке, а не делать это
#при выводе элементов. Также нельзя использовать дополнительный список. Также
#не следует использовать метод pop(k) с параметром.

#МОЁ:
a=[4,6,2,4,3,5,12,24,3,5]
n,o=2,-1
for i in a:
    o+=1
    if o==n:
        a=a[:o]+a[o+1:]
        print(a)
print()
#ЧУЖОЕ:
a=[7,6,5,4,3,2,1]
for i in range(n+1,len(a)):
    a[i-1]=a[i]
a.pop()
print(' '.join([str(i) for i in a]))
print()

#12.
#Вставить элемент
#Дан список целых чисел, число k и значение C. Необходимо вставить в список на
#позицию с индексом k элемент, равный C, сдвинув все элементы, имевшие индекс
#не менее k, вправо.
#Поскольку при этом количество элементов в списке увеличивается, после 
#считывания списка в его конец нужно будет добавить новый элемент, используя 
#метод append.
#Вставку необходимо осуществлять уже в считанном списке, не делая этого при 
#выводе и не создавая дополнительного списка.

a=[8,3,2,3,41,43,41,23,2,56]
k,c=0,6666
a.append(a[-1])
for i in range(1,len(a)-k):
    a[-i]=a[-i-1]
a[k]=c
print(a)
print()

#13.
#Количество совпадающих пар
#Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. 
#Считается, что любые два элемента, равные друг другу образуют одну пару, 
#которую необходимо посчитать.

a=[1,1,1,1,1]
o=0
for i in range(len(a)):
    for l in range(i+1,len(a)):
        if a[i]==a[l]:
            o+=1
print(o)
print()

#14.
#Уникальные элементы
#Дан список. Выведите те его элементы, которые встречаются в списке только один 
#раз. Элементы нужно выводить в том порядке, в котором они встречаются в 
#списке.

a=[6,9,6,23,12,19,14,26]
o=0
for i in range(len(a)):
    for l in range(len(a)):
        if a[i]==a[l]:
            o+=1
        if l==len(a)-1 and o==1:
            print(a[i],end=' ')
            o=0
        if l==len(a)-1 and o!=1:
            o=0
print('\n')

#15.
#Кегельбан
#N кеглей выставили в один ряд, занумеровав их слева направо числами от 1 до N.
#Затем по этому ряду бросили K шаров, при этом i-й шар сбил все кегли с номерами
#от li до ri включительно. Определите, какие кегли остались стоять на месте.
#Программа получает на вход количество кеглей N и количество бросков K.
#Далее идет K пар чисел li, ri, при этом 1≤ li≤ ri≤ N.
#Программа должна вывести последовательность из N символов, где j-й символ есть 
#“I”, если j-я кегля осталась стоять, или “.”, если j-я кегля была сбита.

n,k=20,1
a=['I']*n
for i in range(0,k):
    b,c=(int(input()) for _ in range(2))
    print(b,c)
    a[b-1:c]='.'*(c-b+1)
print(a)
print()

#16.
#Ферзи
#Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
#друг друга. Вам дана расстановка 8 ферзей на доске, определите, есть ли среди
#них пара бьющих друг друга.
#Программа получает на вход восемь пар чисел, каждое число от 1 до 8 —
#координаты 8 ферзей. Если ферзи не бьют друг друга, выведите слово NO, иначе
#выведите YES.

n=8
x=[0]*n
y=[0]*n
result='NO'
for i in range(n):
    x[i],y[i]=[int(j) for j in input().split()]
for i in range(n):
    for l in range(i+1,n):
        if x[i]==x[l] or y[i]==y[l] or abs(x[i]-x[l])==abs(y[i]-y[l]):
            result='YES'
print(result)
   


            
                
                
    
            
            
        
            
            


































































    










    





























































    
            
    
    
    
    
    
    
    
    
        
    
    
































    
    

