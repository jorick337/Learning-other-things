#1.
#Есть список a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89].

#Выведите все элементы, которые меньше 5.

a=[1,1,2,3,58,13,21,34,55,89]#СПИСОК

for a in a:#ДЛЯ A В A:
    if a<5:#ЕСЛИ A<5,ТО
        print(a)#ПИШЕМ А
print()

#2.
#a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];

#b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13].

#Нужно вернуть список, который состоит из элементов,общих для этих двух списков.

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

c = []

a.extend(b)#ДОБАВИЛИ ВСЕ ЗНАЧЕНИЯ ИЗ ОДНОГО СПИСКА В ДРУГОЙ
c.extend(a)#ДОБАВИЛИ ЗНАЧЕНИЯ ИЗ A,КОТОРЫЙ СОДЕРЖИТ ВСЕ ЧИЛА ИЗ A И B
print(c)
print()

#3.
#Отсортируйте словарь по значению в порядке возрастания и убывания.

a.sort()#СОРТИРОВАЛ ПО ЗНАЧЕНИЮ ТИПОВ ДАНЫХ В ПОРЯДКЕ ВОЗРАСТАНИЯ
print(a)#ПИШЕТ В ПОРЯДКЕ ВОЗРАСТАНИЯ
a.reverse()#ПЕРЕВЕРНЁТ ВСЕ ЗНАЧЕНИЯ A
print(a)#ПИШЕТ ЗНАЧЕНИЯ В ПОРЯДКЕ УБЫВАНИЯ
print()

#4.
#Найдите три ключа с самыми высокими значениями в словаре:

my_dict = {'a':500, 'b':5874, 'c': 560,'d':400, 'e':5874, 'f': 20}

a=sorted(my_dict,key=my_dict.get,reverse=True)[:3]#SORTED-СОРТИРУЕТ СЛОВАРЬ :
print(a)#SORTED(ОБЬЕКТ,KEY=(ЗАПИСЫВАТЬ ФУНКЦИЮ),REVERSE(НУЖНО ЛИ ПРОИЗВОДИТЬ СОР
print()#ТИРОВКУ В ОБРЯДНОМ ПОРЯДКЕ))->LIST(:СКОЛЬКО ЗНАЧЕНИЙ КЛЮЧЕЙ МОЖЕТ БРАТЬ)

#5.
#Напишите код, который переводит целое число в строку, при том что его можно
#применить в любой системе счисления.

n='F'#ПИШЕМ ЦЕЛОЕ ЧИСЛО В СКОБОЧКАХ
print(int(n,16))#ПОСЛЕ ЗАПЯТОЙ ОПРЕДЕЛЯЕТСЯ СИСТЕМА СЧИСЛЕНИЯ(МАКСИМУМ 36)
print()#ПОТОМ ВЫВОДИТЬСЯ ЗНАЧЕНИЕ ЭТОГО ЧИСЛА В ЭТОЙ СИСТЕМЕ СЧИСЛЕНИЯ(СТРОКИ)

#6.
#Нужно вывести первые n строк треугольника Паскаля. В этом треугольнике на
#вершине и по бокам стоят единицы, а каждое число внутри равно сумме двух
#расположенных над ним чисел.

def treug(n):#ЗАДАЁМ ФУНКЦИЮ С ПЕРЕМЕННОЙ N
    row=[1]#ПО УМОЛЧАНИЮ РАВНО 1
    y=[0]#ПО УМОЛЧАНИЮ РАВНО 0
    for x in range(max(n,0)):#ЗДЕСЬ В РАДИУСЕ N :
        print(row)#ПИШЕТСЯ N,ЕСЛИ:
        row=[left + right for left,right in zip(row+y,y+row)]#
treug(6)#ВПИСАТЬ ЗНАЧЕНИЯ
print()

#УЧУСЬ ОБРАЩАТЬСЯ К СОСЕДНИМ ЭЛЕМЕНТАМ ВНУТРИ ВЛОЖЕНОГО СПИСКА:

#СОЗДАЁТ НЕСКОЛЬКО СТРОК СПИСКА:
kir=[]
for j in range(5):
    print(kir)
print()

#ДЕЛАЕМ СВОЙ ТРЕУГОЛЬНИК(МАКЕТ):
#УРОВНЕЙ НА ОДНУ ЕДИНИЧКУ БОЛЬШЕ:
#H+1 - РЕШАЕТ СКОЛЬКО БУДЕТ ИНДЕКСОВ В КОРТЕЖАХ

h=3
for j in range(h+1):#БУДЕТ НА ОДИН УРОВЕНЬ БОЛЬШЕ(ВДРУГ ВВЕДЁТ 0)
    kir.append([1]+[0]*h)#ДОБАВЛЯЕМ В 0 ИНДЕКС 1 И ДАЛЬШЕ 0*H,ЧТО ВЫВОДИТ НУЛИ

for j in kir:#ВЫВОДИТЬ ЛУЧШЕ ТАК ИНАЧЕ:
    print(j)#ВСЁ ВЫВЕДИТЬСЯ В ОДНУ СТРОКУ(НО НЕ В ОДИН СЛОВАРЬ)
print()

#ПЫТАЮСЬ СДЕЛАТЬ ТРЕУГОЛЬНИК ПАСКАЛЯ(ПОНЯТЬ КАК ДЕЛАТЬ):

s=3#ЭТО ПАРАМЕТР ДЛЯ УРОВНЕЙ
tr=[]#СОЗДАЁМ СПИСОК
#СОЗДАЮ СПИСОК,У КОТОРОГО 0 ИНДЕКС ВСЕГДА РАВЕН 1,А ДРУГИЕ 0
for l in range(s+1):
    tr.append([1]+[0]*s)
#СОЗДАНИЕ ДВУХ СПИСКОВ,С ПОМОЩЬЮ КОТОРЫХ МЫ СОЗДАЁМ ОДИН,В КОТОРОМ ЗНАЧЕНИЯ ИЗ
#ДВУХ(С ПОМОЩЬЮ ФОРМУЛЫ);В ДАННОМ СЛУЧАЕ:L-ОПРЕДЕЛЯЕТ СТРОКИ,U-СТОЛБЦЫ
#НАРИСУЙ МОРСКОЙ БОЙ(СЕТКУ) И ВСЁ ПОЙМЁШЬ:
#L\U 1 2 3 4
#  1 1 0 0 0
#  2 1 1 0 0
#  3 1 2 1 0
#  4 1 3 3 1
for l in range(1,s+1):
    for u in range(1,s+1):
        tr[l][u]=tr[l-1][u]+tr[l-1][u-1]
#ВЫВОДИМ ТРЕУГОЛЬНИК
#НО: БЕЗ PRINT() В КОНЦЕ БУДЕТ ВЫВОДИТЬСЯ ОДНОЙ СТРОКОЙ ЧЕРЕЗ ЗАПЯТУЮ
#END=' ' - ПИШЕТ ПОСЛЕ КАЖДОГО ПОЛНОГО ДЕЙСТВИЯ ПРОБЕЛ,ПРОПУСКАЕТ СТРОЧКУ
for l in range(0,s+1):
    for u in range(0,s+1):
        print(tr[l][u],end=' ')
    print()
print()

#ТРЕНИРУЮСЬ:

p=4
po=[]

for v in range(p+1):
    po.append([1]*p)

for v in range(p):
    for t in range(p):
        po[v][t]=po[v-1][t]+po[v+1][t-1]

for v in range(p):
    for t in range(p):
        print(po[v][t],end=' ')
    print()
print()

#7.Напишите проверку на то, является ли строка палиндромом. Палиндром — это
#слово или фраза, которые одинаково читаются слева направо и справа налево.

#СОЗДАЮ СПИСОК,В КОТОРОМ ПЕРЕСТАВЛЮ ЗНАЧЕНИЯ ИНДЕКСОВ ЗАДОМ НАПЕРЁД

clovo=str("oo")

for j in clovo:
    list(clovo)
    j=list(clovo)
    j.reverse()
    if list(clovo)==j:
        print("Фраза,которая читается одинаково справо налево и слево направо")
        break
    else:
        print("эта фраза не читается одинаково справо налево и слево направо ")
        break
print()

#8.
#Сделайте так, чтобы число секунд отображалось в виде дни:часы:минуты:секунды.

time=675


d=time//60//60//24 #ДНИ

x=time/60/60/24 #ДНИ С ТОЧКОЙ
h=(x*24)-(d*24) #ЧАСЫ С ТОЧКОЙ

y=int(h) #ЦЕЛЫЙ ЧАС
m=(h*60)-(y*60)#МИНУТЫ С ТОЧКОЙ

j=int(m)
s=(m*60)-(j*60)
print("Дней: ",int(d)," часы: ",int(h)," минуты: ",int(m)," секунд: ",int(s))
print()

#9.
#Вы принимаете от пользователя последовательность чисел, разделённых запятой.
#Составьте список и кортеж с этими числами.

spisok=input("Введите числа через запятую : ")
plus=spisok.split(",")#SPLIT-ВВОДИТ ЗНАЧЕНИЯ ЧЕРЕЗ УКАЗАННЫЙ СИМВОЛ(ЗАПЯТУЮ)

pl=map(int,plus)#MAP-ПРИДАЁТ КАЖДОМУ ЗНАЧЕНИЮ ЗАДАННУЮ ФУНКЦИЮ(INT)

o=list(pl)
n=tuple(o)

print("Список : ",o)
print("Кортеж : ",n)
print()

#10.
#Выведите первый и последний элемент списка.

lol=[1,'o',61,78,124,34]
print("Выводим первый элемент списка : ",lol[0])
print("Выводим последний элемент списка: ",lol[-1])
print()

#11.
#Напишите программу, которая принимает имя файла и выводит его расширение. Если расширение у файла определить невозможно, выбросите исключение.
#Если расширение у файла определить невозможно, выбросите исключение.

#LEN() - ОПРЕДЕЛЯЕТ ДЛИНУ(КОЛИЧЕСТВО ЭЛЕМЕНТОВ ИЛИ СИМВОЛОВ) И ВОЗВРАЩАЕТ ЕЁ
#RAISE - ВОЗБУЖДАЕТ ОШИБКУ,К КОТОРОЙ МОЖНО ПРИПИСАТЬ ЧТО-ЛИБО(В ДАННОМ СЛУЧАЕ
#ЕСЛИ ПОСЛЕДННЕЕ ЗНАЧЕНИЕ МЕНЬШЕ ДВУХ,ТО ВЫВОДИТЬСЯ ОШИБКА)

def get_extension(filename):#ЗАДАЁТ ФУНКЦИЮ С ЗНАЧЕНИЕМ FILENAME
    filename_parts = filename.split('.')#ТО,ЧТО ВВОДИМ ТОЛЬКО БЕЗ
    if len(filename_parts)<2:#ЕСЛИ СИМВОЛОВ МЕНЬШЕ 2,СОСТОЯТ ИЗ ЗНАЧЕНИЙ СЛОВАРЯ: :
        raise ValueError('Файл не имеет расширения')#ТО ВЫЙДЕТ ОШИБКА С ВЫВОДОМ
    first, *middle, last = filename_parts#* -ДАЁТ ПРАВО ЗНАЧЕНИЮ ПРИНИМАТЬ МНОГО
    #ЗНАЧЕНИЙ
    if not last or not first and not middle:#ЕСЛИ НЕТ ПОСЛЕДНЕГО,ПЕРВОГО ИЛИ СРЕ-
        #НЕГО(ИХ МНОГО ИЗ-ЗА *),ТО:
        #ПРИМЕР ИМЁН ФАЙЛОВ: .ИМЯФАЙЛА, ИМЯФАЙЛА. ,ФАЙЛ.ИМЯ.
        raise VallueError("Файл не имеет расширения")

    return filename_parts[-1]#ЭТО ЗНАЧИТ,ЧТО НАЧИНАТЬ  БУДУТ ТОЛЬКО С КОНЦА,
#ТОЕСТЬ БУДЕТ ВЫВОДИТ В КАКОМ ФОРМАТЕ РАБОТАЕТ ФАЙЛ(НАПРИМЕР PY,НО МОЖЕТ ВЫВЕСТИ)
#И ПРОСТО КАКИЕ-ТО СЛОВА (МОЖНО СДЕЛАТЬ ЗАПОЛНЕНИЕ С ПОМОЩЬЮ ДРУГИХ ФУНКЦИЙ И НОВ)
#ВОГО ВЫВОДА

print(get_extension('1.py'))# ИМЯФАЙЛА.
print(get_extension('py.ЫВ'))# .ИМЯФАЙЛА
print(get_extension('1.ЫВ.py'))# ФАЙЛ.ИМЯ.
print()
#12.
#При заданном целом числе n посчитайте n + nn + nnn.

n=2

n = n + int(str(n)+str(n)) +int(str(n)+str(n)+str(n))

print(n)
print()

#13.
#Напишите программу, которая выводит чётные числа из заданного списка и
#останавливается, если встречает число 237.

l=[3,5,72,65,34,237,65,56]

#ВЫВОДИТ ЧЁТНЫЕ ЧИСЛА,НО ПОСЛЕ 237 ПРЕКРАЩАЕТ РАБОТУ:

for i in l:
    if i==237:
        break
    if i%2<=0:
        print(i)
print()

#14.
#Напишите программу, которая принимает два списка и выводит все элементы
#первого, которых нет во втором.

j1=[45,67,"90",78]
j2=[67,87,45,"90",78]

for i in j1:
    for j in j2:
        if i==j:
            print(i)
print()

#15.
#Выведите список файлов в указанной директории.

from os import listdir#OS-МОДУЛЬ,В КОТОРОМ ЕСТЬ LISTDIR-МЕТОД ВОЗВРАЩАЮЩИЙ КАТА-
#ЛОГ,В КОТОРОМ ОПИСАНЫ ВСЕ ФАЙЛЫ ПО ДАННОМУ ПУТИ

from os.path import join,isfile#OS.PATH-ЭТО МОДУЛЬ В МОДУЛЕ OS;JOIN-МЕТОД СОЕДИ-
#НЯЮЩИЙ ПУТИ С УЧЁТОМ ОСОБЕННОСТИ ОПЕРАТОРА;ISFILE-ОПРЕДЕЛЯЕТ ЯВЛЯЕТСЯ ЛИ ПУТЬ
#ФАЙЛОМ

files = [f for f in listdir('\steam') if isfile(join('\steam', f))]#ВЫВОДИТ ВСЕ
#ФАЙЛЫ. НЕ СЧИТАЯ ПАПОК .
print(files)#ВЫВОДИТ ИХ
print()

#16.
#Сложите цифры целого числа.

a=12

def s(n):#ВВОДИМ ПЕРЕМЕННУЮ С ЗНАЧЕНИЕМ N (ЦИФРЫ)
    d=[int(d1) for d1 in str(n)]#D - СПИСОК,КОТОРЫЙ СОСТОИТ ИЗ ЗНАЧЕНИЙ N
    return sum(d)#SUM-СУММИРУЕТ ЗНАЧЕНИЯ ИЗ СПИСКОВ ИЛИ ПЕРЕМЕННЫХ
print(s(67))
print()

#17.
#Посчитайте, сколько раз символ встречается в строке.

#МОЙ СПОСОБ
a=str('dsadsadsadsa')
c=0

for i in a:
    a=list(i)
    print(a)
    b=['d']
    if a==b:
        c=c+1

print('Символов:')
print(c)

#ЧУЖОЙ СПОСОБ
n='ironoon'
print(n.count('o'))
print()

#19.
#Поменяйте значения переменных местами.

#МОЁ
t='Mister'
print(t[::-1])#[::step] - step отвечает за начало с какого символа

#ЧУЖОЕ(С ЧИСЛАМИ)

x= 5
y= 10
x,y=y,x
print()

#20.
#С помощью анонимной функции извлеките из списка числа, делимые на 15.

#МОЁ
spis=[16,36,132,60,64,90]
for i in spis:
    if i%15==0:
        print(i)

#ЧУЖОЕ(В СПИСКЕ)

nums=[45,55,60,37,100,105,220]
results=list(filter(lambda x:not x%15,nums))
print(results)
print()

#21.
#Нужно проверить, все ли числа в последовательности уникальны.

def yik(n):
    return len(n)==len(set(n))

print(yik([56,67,56]))
print()

#22.
#Напишите программу, которая принимает текст и выводит два слова: наиболее часто
#встречающееся и самое длинное.

import collections#МОДУЛЬ,КОТОРЫЙ СЧИТЕТ КОЛИЧЕСТВО НЕИЗМЕНЯЕМЫХ ОБЬЕКТОВ

i='алахахбар слава алах ! алах единый бог'
m=i.split(' ')# SPLIT() - ДЕЛАЕТ СПИСОК РАЗДЕЛЯЯ ПРИ ЭТОМ ПЕРЕМЕНЫЕ ОПРЕДЕЛЁННЫМ ЗНАКОМ
a=collections.Counter(m)#ЗНАКОМ;COUNTER()-СКОЛЬКО ПОВТОРЯЮЩИХСЯ ЗНАЧЕНИЙ
c=a.most_common()[0]#MOST_COMMON()[] - ВОЗВРАЩАЕТ НАИБОЛЕЕ ЧАСТО ВСТРЕЧАЮЩИЕСЯ
#ЭЛЕМЕНТЫ,МОЖНО УКАЗАТЬ ДО КАКОГО [] ИНДЕКСА ИМ РАБОТАТЬ

l=max(m,key=len)

print(c,' ',l)
