#1.
#Простейшие арифметические операции 
#Написать функцию arithmetic, принимающую 3 аргумента: первые 2 - числа, третий 
#- операция, которая должна быть произведена над ними. Если третий аргумент +, 
#сложить их; если —, то вычесть; * — умножить; / — разделить (первое на второе).
#В остальных случаях вернуть строку "Неизвестная операция".

a=[6,7]
print('Какую операцию хотите провести (с числами 6 и 7) ')
b='9'
for i in a:
    if b=='+':
        c=a[0]+a[1]
        print(c)
        break
    if b=='-':
        c=a[0]-a[1]
        print(c)
        break
    if b=='*':
        c=a[0]*a[1]
        print(c)
        break
    if b=='/':
        c=a[0]/a[1]
        print(c)
        break
else:
    print('Неизвестная операция')
print()

#2.
#Високосный год
#Написать функцию is_year_leap, принимающую 1 аргумент — год, и возвращающую
#True, если год високосный, и False иначе.

n=2300
if n%4==0 and n%100>0 or n%400==0 :
    print('Год високосный')
else:
    print('Год невисокосный')
print()

#3.
#Квадрат
#Написать функцию square, принимающую 1 аргумент — сторону квадрата, и
#возвращающую 3 значения (с помощью кортежа): периметр квадрата, площадь
#квадрата и диагональ квадрата.

print('Периметр , площадь , диагональ квадрата (при стороне квадрата равной 5)')
o=5
import math
p=4*o
s=o**2
d=o*math.sqrt(2)
m=(p,s,d)
print(m)        
print()

#4.
#Времена года
#Написать функцию season, принимающую 1 аргумент — номер месяца (от 1 до 12), и 
#возвращающую время года, которому этот месяц принадлежит (зима, весна, лето или
#осень)

month=7

if i==0:
    print('MOTH = 0')
if i>12:
    print('MOTH > 12')
if i==12 or i==1 or i==2:
    print('ЗИМА')
if i==3 or i==4 or i==5:
    print('ВЕСНА')
if i==6 or i==7 or i==8:
    print('ЛЕТО')
if i==9 or i==10 or i==11:
    print('ОСЕНЬ')
print()

#5.
#Банковский вклад
#Написать функцию bank, принимающая аргументы a и years, и возвращающую сумму, 
#которая будет на счету пользователя.
#НА 10% ГОДОВЫХ

def bank(a,years):
    money=a*1.1
    for i in range(years):
        if years==1:
            money==money
        if years>1:
            money*=1.1
    return money    
print(bank(1000,1))
print()

#6.
#Простые числа
#Написать функцию is_prime, принимающую 1 аргумент — число от 0 до 1000, и 
#возвращающую True, если оно простое, и False - иначе.

def is_prime(l):
    if l > 1000:
        print('L > 1000 : ')
    if l<=0:
        print('L <= 0 : ')
    if l%l==0 and l%1==0:
        print('ПРОСТОЕ : ')
    if l/4==int(l/4):
        if l/6==int(l/6):
            if l/8==int(l/8):
                if l/9==int(l/9):
                    if l/10==int(l/10):
                        if l/12==int(l/12):
                            if l/14==int(l/14):
                                if l/15==int(l/16):
                                    print('НЕПРОСТОЕ : ')                                                                                               
    return l
print(is_prime(364))
print()

#7.
#Правильная дата
#Написать функцию date, принимающую 3 аргумента — день, месяц и год. Вернуть
#True, если такая дата есть в нашем календаре, и False иначе.

import datetime
def date(g,d,m):
    try:
        s=datetime.date(g,d,m)
    except ValueError:
        print('Что-то из этого : ')
        print('1 <= ГОД  <= 9999')
        print('1 <= МЕСЯЦ <= 12')
        print('1 <= ДЕНЬ <= ДНЕЙ В МЕСЯЦЕ')
    s=datetime.date(g,d,m)
    if s==datetime.date(g,d,m):
        print('TRUE')
    else:
        print('FALSE')
    return s

print(date(670,8,5))
print()

#8.
#XOR-шифрование
#Написать функцию XOR_cipher, принимающая 2 аргумента: строку, которую нужно 
#зашифровать, и ключ шифрования, которая возвращает строку, зашифрованную путем 
#применения функции XOR (^) над символами строки с ключом. Написать также функцию
#XOR_uncipher, которая по зашифрованной строке и ключу восстанавливает исходную строку.

import itertools #ITERTOOLS - МОДУЛЬ С ПОЛЕЗНЫМИ ИТЕРАЛАМИ

def XOR_cipher(string,key):
    answer = [] # список для
    key = itertools.cycle(key) #cycle - повторяет ключь,чтобы его зашифровать
    for s,k in zip(string,key):#новые ПР;они в zip-гарантия итерации слева направо
        #chr - представляет число в виде символа(целое)
        #ord - предстваляет символ в виде числа(целого)
        answer.append(chr(ord(s)^ord(k)))#добавление символа в число и в символ
    return ''.join(answer)#присоединяет в строку значения answer

print(XOR_cipher('Привет!','2'))
print()

XOR_uncipher=XOR_cipher
print(XOR_uncipher(XOR_cipher('Привет!','2'),'2'))
print()


    




































    
    
