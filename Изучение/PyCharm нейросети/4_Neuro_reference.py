# ССЫЛКА НА ИСТОЧНИК: https://qudata.com/ml/ru/NN_Base_Torch_NN_Ref.html

#region ИНТЕРФЕЙСЫ ДЛЯ СЛОЕВ(ГОТОВЫЕ

import torch
# Слои могут быть функциями или классами

# Модуль который содержит функции для слоев(много)
import  torch.nn.functional as F 
# Слой как функция:
N, nX, nY = 1, 2, 3                               # число примеров, входов, выходов
X = torch.ones(N,  nX)                            # [ [1 1] ] - примеры
# Пояснение для весов:
# nY - размерность выходного тензора
# nX - размерность входного тензора
W = torch.ones(nY, nX)                            # [ [1 1] [1 1] [1 1] ] - весы
B = torch.ones(nY)                                # [ 1 1 1 ] - смещение

# linear - преобразует тензор X с весами W и смещением B по формуле:
# Y = X*W.t() + B
# W.t() = [ [1 1 1] [1 1 1] ] - транспонированная версия W(нужна для умножения матриц)
# X*W.t() = (1,2)*(2,3) = (1,3) = [ [1 1] ] * [ [1 1 1] [1 1 1] ] = 
# [ 1*1+1*1 1*1+1*1 1*1+1*1] = [2 2 2]
# X*W.t() + B = [ [2 2 2] ] + [ 1 1 1 ] = [ [3 3 3] ]
Y = F.linear(X, W, B); #print(Y)                 # [ [3. 3. 3.] ]
# Аналоги этой функции:
Y = X.mm(W.t())+B; #print(Y)                    # [ [3. 3. 3.] ]
Y = torch.addmm(B,X,W.t()); #print(Y)           # [ [3. 3. 3.] ]

#endregion